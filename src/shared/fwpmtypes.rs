// Copyright Â© 2015-2017 winapi-rs developers
// Licensed under the Apache License, Version 2.0
// <LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0> or the MIT license
// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your option.
// All files in the project carrying such notice may not be copied, modified, or distributed
// except according to those terms.
use ctypes::wchar_t;
use shared::basetsd::{UINT32, UINT64};
use shared::fwptypes::{FWP_BYTE_BLOB, FWP_CLASSIFY_OPTION_TYPE, FWPM_DISPLAY_DATA0, FWP_VALUE0};
use shared::guiddef::GUID;
use shared::minwindef::{BOOL, DWORD};
use um::winnt::SID;

ENUM!{enum FWPM_CHANGE_TYPE {
    FWPM_CHANGE_ADD = 1,
    FWPM_CHANGE_DELETE = FWPM_CHANGE_ADD + 1,
    FWPM_CHANGE_TYPE_MAX = FWPM_CHANGE_DELETE + 1,
}}

pub const FWPM_SUBSCRIPTION_FLAG_NOTIFY_ON_ADD: DWORD = 0x00000001;
pub const FWPM_SUBSCRIPTION_FLAG_NOTIFY_ON_DELETE: DWORD = 0x00000002;

ENUM!{enum FWPM_SERVICE_STATE {
    FWPM_SERVICE_STOPPED = 0,
    FWPM_SERVICE_START_PENDING = FWPM_SERVICE_STOPPED + 1,
    FWPM_SERVICE_STOP_PENDING = FWPM_SERVICE_START_PENDING + 1,
    FWPM_SERVICE_RUNNING = FWPM_SERVICE_STOP_PENDING + 1,
    FWPM_SERVICE_STATE_MAX = FWPM_SERVICE_RUNNING + 1,
}}

pub const FWPM_NET_EVENT_KEYWORD_INBOUND_MCAST: DWORD = 0x00000001;
pub const FWPM_NET_EVENT_KEYWORD_INBOUND_BCAST: DWORD = 0x00000002;
pub const FWPM_NET_EVENT_KEYWORD_CAPABILITY_DROP: DWORD = 0x00000004;
pub const FWPM_NET_EVENT_KEYWORD_CAPABILITY_ALLOW: DWORD = 0x00000008;
pub const FWPM_NET_EVENT_KEYWORD_CLASSIFY_ALLOW: DWORD = 0x00000010;
pub const FWPM_ENGINE_OPTION_PACKET_QUEUE_NONE: DWORD = 0x00000000;
pub const FWPM_ENGINE_OPTION_PACKET_QUEUE_INBOUND: DWORD = 0x00000001;
pub const FWPM_ENGINE_OPTION_PACKET_QUEUE_FORWARD: DWORD = 0x00000002;
pub const FWPM_ENGINE_OPTION_PACKET_BATCH_INBOUND: DWORD = 0x00000004;

ENUM!{enum FWPM_ENGINE_OPTION {
    FWPM_ENGINE_COLLECT_NET_EVENTS = 0,
    FWPM_ENGINE_NET_EVENT_MATCH_ANY_KEYWORDS = FWPM_ENGINE_COLLECT_NET_EVENTS + 1,
    FWPM_ENGINE_NAME_CACHE = FWPM_ENGINE_NET_EVENT_MATCH_ANY_KEYWORDS + 1,
    FWPM_ENGINE_MONITOR_IPSEC_CONNECTIONS = FWPM_ENGINE_NAME_CACHE + 1,
    FWPM_ENGINE_PACKET_QUEUING = FWPM_ENGINE_MONITOR_IPSEC_CONNECTIONS + 1,
    FWPM_ENGINE_TXN_WATCHDOG_TIMEOUT_IN_MSEC = FWPM_ENGINE_PACKET_QUEUING + 1,
    FWPM_ENGINE_OPTION_MAX = FWPM_ENGINE_TXN_WATCHDOG_TIMEOUT_IN_MSEC + 1,
}}

pub const FWPM_SESSION_FLAG_DYNAMIC: DWORD = 0x00000001;
pub const FWPM_SESSION_FLAG_RESERVED: DWORD = 0x10000000;

STRUCT!{struct FWPM_SESSION0 {
    sessionKey: GUID,
    displayData: FWPM_DISPLAY_DATA0,
    flags: UINT32,
    txnWaitTimeoutInMSec: UINT32,
    processId: DWORD,
    sid: *mut SID,
    username: *mut wchar_t,
    kernelMode: BOOL,
}}

STRUCT!{struct FWPM_SESSION_ENUM_TEMPLATE0 {
    reserved: UINT64,
}}

pub const FWPM_PROVIDER_FLAG_PERSISTENT: DWORD = 0x00000001;
pub const FWPM_PROVIDER_FLAG_DISABLED: DWORD = 0x00000010;

STRUCT!{struct FWPM_PROVIDER0 {
    providerKey: GUID,
    displayData: FWPM_DISPLAY_DATA0,
    flags: UINT32,
    providerData: FWP_BYTE_BLOB,
    serviceName: *mut wchar_t,
}}

STRUCT!{struct FWPM_PROVIDER_ENUM_TEMPLATE0 {
    reserved: UINT64,
}}

STRUCT!{struct FWPM_PROVIDER_CHANGE0 {
    changeType: FWPM_CHANGE_TYPE,
    providerKey: GUID,
}}

STRUCT!{struct FWPM_PROVIDER_SUBSCRIPTION0 {
    enumTemplate: *mut FWPM_PROVIDER_ENUM_TEMPLATE0,
    flags: UINT32,
    sessionKey: GUID,
}}

pub const FWPM_PROVIDER_CONTEXT_FLAG_PERSISTENT: DWORD = 0x00000001;
pub const FWPM_PROVIDER_CONTEXT_FLAG_DOWNLEVEL: DWORD = 0x00000002;

STRUCT!{struct FWPM_CLASSIFY_OPTION0 {
    type_: FWP_CLASSIFY_OPTION_TYPE,
    value: FWP_VALUE0,
}}

STRUCT!{struct FWPM_CLASSIFY_OPTIONS0 {
    numOptions: UINT32,
    options: *mut FWPM_CLASSIFY_OPTION0,
}}

ENUM!{enum FWPM_PROVIDER_CONTEXT_TYPE {
    FWPM_IPSEC_KEYING_CONTEXT = 0,
    FWPM_IPSEC_IKE_QM_TRANSPORT_CONTEXT = FWPM_IPSEC_KEYING_CONTEXT + 1,
    FWPM_IPSEC_IKE_QM_TUNNEL_CONTEXT = FWPM_IPSEC_IKE_QM_TRANSPORT_CONTEXT + 1,
    FWPM_IPSEC_AUTHIP_QM_TRANSPORT_CONTEXT = FWPM_IPSEC_IKE_QM_TUNNEL_CONTEXT + 1,
    FWPM_IPSEC_AUTHIP_QM_TUNNEL_CONTEXT =  FWPM_IPSEC_AUTHIP_QM_TRANSPORT_CONTEXT + 1,
    FWPM_IPSEC_IKE_MM_CONTEXT = FWPM_IPSEC_AUTHIP_QM_TUNNEL_CONTEXT + 1,
    FWPM_IPSEC_AUTHIP_MM_CONTEXT = FWPM_IPSEC_IKE_MM_CONTEXT + 1,
    FWPM_CLASSIFY_OPTIONS_CONTEXT = FWPM_IPSEC_AUTHIP_MM_CONTEXT + 1,
    FWPM_GENERAL_CONTEXT = FWPM_CLASSIFY_OPTIONS_CONTEXT + 1,
    FWPM_IPSEC_IKEV2_QM_TUNNEL_CONTEXT = FWPM_GENERAL_CONTEXT + 1,
    FWPM_IPSEC_IKEV2_MM_CONTEXT = FWPM_IPSEC_IKEV2_QM_TUNNEL_CONTEXT + 1,
    FWPM_IPSEC_DOSP_CONTEXT = FWPM_IPSEC_IKEV2_MM_CONTEXT + 1,
    FWPM_IPSEC_IKEV2_QM_TRANSPORT_CONTEXT = FWPM_IPSEC_DOSP_CONTEXT + 1,
    FWPM_PROVIDER_CONTEXT_TYPE_MAX = FWPM_IPSEC_IKEV2_QM_TRANSPORT_CONTEXT + 1,
}}

// TODO: Remove
STRUCT!{struct FWPM_FILTER0 {
    moo: UINT64,
}}

// UNION2!{union FWPM_PROVIDER_CONTEXT0_u {
    // [u32; 1] [u64; 1],
    // keyingPolicy keyingPolicy_mut: *mut IPSEC_KEYING_POLICY0,
    // ikeQmTransportPolicy ikeQmTransportPolicy_mut: *mut IPSEC_TRANSPORT_POLICY0,
    // ikeQmTunnelPolicy ikeQmTunnelPolicy_mut: *mut IPSEC_TUNNEL_POLICY0,
    // authipQmTransportPolicy authipQmTransportPolicy_mut: *mut IPSEC_TRANSPORT_POLICY0,
    // authipQmTunnelPolicy authipQmTunnelPolicy_mut: *mut IPSEC_TUNNEL_POLICY0,
    // ikeMmPolicy ikeMmPolicy_mut: *mut IKEEXT_POLICY0,
    // authIpMmPolicy authIpMmPolicy_mut: *mut IKEEXT_POLICY0,
    // dataBuffer dataBuffer_mut: *mut FWP_BYTE_BLOB,
    // classifyOptions classifyOptions_mut: *mut FWPM_CLASSIFY_OPTIONS0,
// }}

// STRUCT!{struct FWPM_PROVIDER_CONTEXT0 {
    // providerContextKey: GUID,
    // displayData: FWPM_DISPLAY_DATA0,
    // flags: UINT32,
    // providerKey: *mut GUID,
    // providerData: FWP_BYTE_BLOB,
    // type_: FWPM_PROVIDER_CONTEXT_TYPE,
	// u: FWPM_PROVIDER_CONTEXT0_u,
    // providerContextId: UINT64,
// }}





